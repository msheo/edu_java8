mysql 실행 : mysqld
mysql 중지 : mysqladmin -u root shutdown

1. 유지보수성이 있도록 하기 위해 Refactoring 기법 중 extract method를 이용해서
   SoC(Separation of Concern)를 수행

2. 재사용성의 측면에서 DAO 클래스를 수정
   Database 연결하는 메소드를 추상 메소드로 수정한 후(따라서 클래스도 추상화)
   우리 추상 클래스(DAO)를 상속받아서 고객이 오버라이딩 하여 사용하도록 처리(LotteBookDAO)
   따라서 서비스에서는 BookDAO가 추상 클래스이기 때문에 객체화(new) 못함
   즉 BookDAO dao = new LotteBookDAO();

3. BookDAO를 구입한 회사는 이미 자신이 사용하고 있는 DAO가 있음
   기존 DAO가 존재하는 경우(우리 DAO에서 기능만 필요해서 구입한 상황 DB 커넥션 X). 
   따라서 고객은 새롭게 클래스를 만들어서 우리가 제공한 클래스의 추상 메소드 구현X(상속X)
   즉 상속받아서 커플링 높이는 방식이라는 2번의 단점을 극복하기 위해
   아예 ConnectionMaker 클래스 만들어서(상속받는방식말고 클래스 생성) 객체로서 생성하여 커넥션 제공
   특히 가령 이미 DAO가 상속이 되어있는 경우는 다중상속 안되니까 자바는 .. 이렇게(3번) 해야지머..

4. 다중상속의 단점도 해결할 수 있는 방법 -> 인터페이스 활용(ConnectionMaker4.java)
   판매자가 BookDao와 ConnectionMaker4 interface 둘 다 판매.
   해당 interface를 기반으로 사간 사람이 class를 작성
   좋은 점은 상속을 사용하지 않아서.. 기존 dao활용성을 높일 수 있어요 
   하지만 한계 있음 -> 인터페이스에 근간한 의존성 주입해야함 -> BookService.java 주석 참고!!!
   

==============================================================================================

Layered Model

Presentation Layer(표현계층) : 사용자와 대면하는 layer(입출력 담당)
    
	lll

Business Logic Layer(비즈니스 로직) : 비즈니스 로직 담당

	lll

Persistence Layer (DB 처리): DB, file 

위 Layered Model와 객체지향설계원칙 중 SRP(Single Responsibility Principle)을 이용하여 MVC 패턴 창출

===========================================================================================

메인 주석부터 달고(필요한 클래스 추출)

인터페이스 기반 개발!! 해야하니까 인터페이스 만들고 기능(메소드)부터 추상화 시켜야한다.






