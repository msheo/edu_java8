
package nio;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.ServerSocketChannel;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;

public class Exam10_ServerSocketChannel extends Application {
	
	TextArea textArea;
	Button startBtn;
	
	// 문자열 받아서 textArea에 출력
	private void pringMsg(String msg) {
		Platform.runLater(()->{
			textArea.appendText(" [ " + msg + " ] \n");
		});
	}
	
	private void startserver() {
		// 네트워크를 통해서 클라이언트의 접속을 받을 수 있는 서버 Thread 생성.
		new Thread(()-> {
			try {
				ServerSocketChannel server = ServerSocketChannel.open();
				server.configureBlocking(true);		// blocking으로 처리, 만약 비동기 처리하고싶으면 exam08 에서의 attachment와 handler 콜백 써야해.. 복잡해..
				server.bind(new InetSocketAddress(5555));	// 5555 포트번호로 접속을 받아요.
				
				while(true) {
					pringMsg("클라이언트 접속 대기중");
					server.accept()
					
					
				}
				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}).start();
		
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception {
		
		BorderPane root = new BorderPane();
		root.setPrefSize(700, 500);
		
		textArea = new TextArea();
		textArea.setEditable(false);
		root.setCenter(textArea);
		
		BorderPane bottom = new BorderPane();
		bottom.setPrefSize(700, 50);
		
		startBtn = new Button("서버 실행");
		startBtn.setOnAction(e->startserver());
		bottom.setCenter(startBtn);
		
		root.setBottom(bottom);
		
		Scene scene = new Scene(root);
		primaryStage.setScene(scene);
		primaryStage.show();
		
	}
	
	public static void main(String[] args) {
		launch();
	}


}
