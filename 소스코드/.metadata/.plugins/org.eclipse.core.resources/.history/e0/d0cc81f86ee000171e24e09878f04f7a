package lambda;

@FunctionalInterface
interface Exam02_MyFunctionalInterface{
	public void myInfo();
}

class OuterClass {
	private int outerField = 100;
	
	class InnerClass {
		private int innerField = 200;
		int same = 1000;
		
		public void innerMethod() {
			int localVariable = 300;
			int same = 1500;
			
			Exam02_MyFunctionalInterface fi = () -> {
				System.out.println("localVariable : " + localVariable);
			//	localVariable = 500; 람다식 내에서는 지역변수의 참조만 가능하고 변경은 안된다.(람다 내에서는 final로 지정이 되기 때문)
			//  람다식 내에서의 this는 이 람다식을 이용하는 클래스의 instance. 원래 람다식도 객체가 하나 만들어지는 것인데, this가 그 익명객체를 의미하는 것이 아니라 람다식을 포함하는 클래스의 instance를 의미
			System.out.println("innerField : " + this.innerField);
			System.out.println("innerField : " + innerField);
			System.out.println("outerField : " + outerField);
			
			innerField = 500 ; // local변수만 final이라 바꾸지 못하고 나머지 field는 변경 가능
			
			System.out.println("outerClass same : " + OuterClass.this.same);
			
			};
			fi.myInfo();

		}
	
	}
	
}

public class Exam02_LambdaUsingVariable {

	public static void main(String[] args) {
		
		OuterClass outerClass = new OuterClass();
		
		OuterClass.InnerClass innerClass = outerClass.new InnerClass();
		
		innerClass.innerMethod();
		
	}
	
}
