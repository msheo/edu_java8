1. 객체지향 개념

1-1. Inheritance ( 상속)
  . 클래스를 작성할 때 기존 클래스를 확장해서 생성하는 기법 
  . 기존 클래스를 재 사용한다는 취지로는 객체지향적이라고 말할 수 있어요
  . 자바는 단일상속만 지원해요.
  . (단 Java8에서 default method라는 이름의 이상한 method가 등장)
  . 이 default method는 interface 안에서만 사용할 수 있어요
  . interface 안에 구현 method가 나올 수 있도록 만들어 줘요
  . 이 default method로 인해서 자바에서 다중상속이 부분적으로 가능.
  . => 단점 : 프로그램이 모호해진다는 점.

1-2. eclipse 설정
  . encoding 설정(UTF-8)
  . javadoc 설정
  . import 설정 (preference->java->editor->save actions -> organize imports 체크)
  . 폰트설정
  . project생성
  . 기본 package : oop
  . 기본 개념 : oop.basic package 관리
  . 프로그램 실행
    - JVM 기동
    - Bootstrap ClassLoader(Object class)
    - Extension ClassLoader, System ClassLoader를 통해 필요한 클래스를 JVM에 로딩
    - main()이 있는 class의 vytecode를 메모리에 로딩
    - JVM이 관리하는 메모리 영역이 총 5개 중 3개(Method Area, Stack, Heap)
    - Method Area : 클래스 자체에 대한 정보(필드, 메소드, 클래스명 등)
    - Heap : java에서 객체(instance)라고 표현되는 것은 무조건 Heap에 저장
    - Stack : Method가 호출되면 해당 method의 영역이 stack에 잡힘, method의 인자, 지역변수, 결과데이터 저장공간 등이 생성, method호출이 끝나면 자동적으로 메모리에서 지움
    - 자바는 실행중에 클래스를 동적으로 적재하고(Method Area) 객체를 생성한다.


1-3. mysql
  . 데이터베이스 기동 -> mysql\bin에서 cmd열고 mysqld
  . mysql db console 진입 : mysql -u root
  . 새로운 사용자 생성 : create user java identified by "java";  (비번은 "" 붙이는 것 권장) mysql 특성상 한번 더 -> create user java@localhost identified by "java";
  . 데이터가 입력될 데이터베이스를 생성 : create database library;
  . 사용자 권한설정 : grant all privileges on library.* to java; + grant all privileges on library.* to java@localhost;
  . flush privileges; : grant 한 테이블을 reload하여 변경사항 즉시 반영
  . 테이블 생성해서 데이터 입력 : exit(console out) 후 mysql -u java -p library < _table.sql
  . 